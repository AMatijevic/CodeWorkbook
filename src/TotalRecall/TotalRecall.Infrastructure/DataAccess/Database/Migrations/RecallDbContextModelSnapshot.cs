// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TotalRecall.Infrastructure.DataAccess.Database;

namespace TotalRecall.Infrastructure.DataAccess.Database.Migrations
{
    [DbContext(typeof(RecallDbContext))]
    partial class RecallDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity("TotalRecall.Core.Entities.Memory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Complexity");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Edited");

                    b.Property<int>("Importance");

                    b.Property<string>("Name");

                    b.Property<double>("TimeEstimate");

                    b.Property<int>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Memories");
                });

            modelBuilder.Entity("TotalRecall.Core.Entities.MemoryTag", b =>
                {
                    b.Property<int>("MemoryId");

                    b.Property<int>("TagId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Edited");

                    b.HasKey("MemoryId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("MemoryTag");
                });

            modelBuilder.Entity("TotalRecall.Core.Entities.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Edited");

                    b.Property<int?>("MemoryId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("MemoryId");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("TotalRecall.Core.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Edited");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TotalRecall.Core.Entities.Memory", b =>
                {
                    b.OwnsOne("TotalRecall.Core.Entities.ValueObjects.Length", "Length", b1 =>
                        {
                            b1.Property<int>("MemoryId");

                            b1.Property<float>("Amount");

                            b1.Property<int>("Unit");

                            b1.HasKey("MemoryId");

                            b1.ToTable("Memories");

                            b1.HasOne("TotalRecall.Core.Entities.Memory")
                                .WithOne("Length")
                                .HasForeignKey("TotalRecall.Core.Entities.ValueObjects.Length", "MemoryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("TotalRecall.Core.Entities.MemoryTag", b =>
                {
                    b.HasOne("TotalRecall.Core.Entities.Memory", "Memory")
                        .WithMany("MemoryTags")
                        .HasForeignKey("MemoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TotalRecall.Core.Entities.Tag", "Tag")
                        .WithMany("MemoryTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TotalRecall.Core.Entities.Summary", b =>
                {
                    b.HasOne("TotalRecall.Core.Entities.Memory")
                        .WithMany("Summarys")
                        .HasForeignKey("MemoryId");
                });
#pragma warning restore 612, 618
        }
    }
}
